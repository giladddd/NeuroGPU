objref outFile,st, st2, st3, st4
depth = 2
celsius = 25
proc createSimpleCompt(){
	nseg = 29
	cm=1
	insert hh
	insert na
	insert kv
	usetable_hh=0
	//gnabar_hh =0
	//gkbar_hh =0
	//gbar_na = gbar_na*35
	//gbar_kv = gbar_kv*35
	
finitialize(-65)
}

//objref mt, pp, sref, fn
/*proc printASpecificPointProcess(){localobj fn
	//fn = new File()
	//fn.wopen($s1)
	//section sref = $s3
	sref.sec
	mt = new MechanismType(1)	//QWERTY
	mt.select($s2)		//QWERTY
	fn.printf($s2)
	//section sref = $s3
	for (pp = mt.pp_begin(); object_id(pp) != 0; pp = mt.pp_next()) {	//QWERTY
		x = pp.get_loc()
		fn.printf(",%g", x)
		pop_section()
	}
	fn.printf("\n")
}*/

/*begintemplate String
	public s
	strdef s
endtemplate String
objref s[10]*/

objref mt, pp
proc printPointProcesses(){localobj fn
//Print the names of all density mechanisms
//mt = new MechanismType(0)
	fn = new File()
	fn.wopen($s1)
	forall{
		fn.printf("#%s\n",secname())
		mt = new MechanismType(1)	
		mt.select("IClamp")		
		//fn.printf("IClamp")
		for (pp = mt.pp_begin(); object_id(pp) != 0; pp = mt.pp_next()) {
			x = pp.get_loc()
			del1 = pp.del
			dur1 = pp.dur
			amp1 = pp.amp
			fn.printf("IClamp,%g, %g, %g, %g, ", x, del1, dur1, amp1)
			pop_section()
		}
		fn.printf("\n")
	}
}


proc printTopology(){
	topology()
	forall{
		printf("%s\n",secname())
		printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",nseg,L,diam,Ra,cm,dt,st.del,st.dur,st.amp,tfinal,v(0.5),area(0.5),parent_connection(),n3d())
		printf("%f,%f,%f,%f,%f,%f\n",gnabar_hh,gkbar_hh,gl_hh,ena,ek,el_hh)
	}
}

proc printFmatrix(){
	hoc_stdout($s1)
	while(t<tfinal){
			fcurrent()
			fmatrix()
			forall{
				printf("%s\n",secname())
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0),gk_hh(0),gna_hh(0),gl_hh(0),ik(0),ina(0),il_hh(0),m_hh(0),h_hh(0),n_hh(0),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.2),gk_hh(0.2),gna_hh(0.2),gl_hh(0.2),ik(0.2),ina(0.2),il_hh(0.2),m_hh(0.2),h_hh(0.2),n_hh(0.2),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.4),gk_hh(0.4),gna_hh(0.4),gl_hh(0.4),ik(0.4),ina(0.4),il_hh(0.4),m_hh(0.4),h_hh(0.4),n_hh(0.4),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.6),gk_hh(0.6),gna_hh(0.6),gl_hh(0.6),ik(0.6),ina(0.6),il_hh(0.6),m_hh(0.6),h_hh(0.6),n_hh(0.6),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.8),gk_hh(0.8),gna_hh(0.8),gl_hh(0.8),ik(0.8),ina(0.8),il_hh(0.8),m_hh(0.8),h_hh(0.8),n_hh(0.8),minf_hh,mtau_hh,hinf_hh,htau_hh)
			}
			fadvance()
		}
	hoc_stdout()
}

strdef mname,s,ss,cmd
objref mt,ms
proc printMechanisms(){localobj fn
//Print the names of all density mechanisms
mt = new MechanismType(0)
	fn = new File()
	fn.wopen($s1)
	forall{
	fn.printf("#%s\n",secname())
		for i=0, mt.count()-1 {
			mt.select(i)
			mt.selected(mname)
			
			if (ismembrane(mname)){
				ms = new MechanismStandard(mname,-1)
				for j=0, ms.count()-1 {
					k = ms.name(s, j)
					sprint(ss,"temp=%s",s)
					execute(ss)
					fn.printf("%s = %f\n",s,temp) 
				}
			}
			}
	}
}

numOfNodes = 2^depth-1
create dends[numOfNodes]
proc buildBTree(){
	fatherInd = $1
	currInd=$2
	currDepth =$3
	access dends[$2]
	createSimpleCompt()
	//nseg=currInd+1
	
	if($2>0){
		connect dends[$2](0), dends[$1](1)
	}
	printf("f is %d c is %d d is %d\n",$1,$2,$3)
	if($3 < depth){
	printf("currDepth is %d depth is %d\n",$3,depth)
		buildBTree($2,$2*2+1,$3+1)
		buildBTree($2,$2*2+2,$3+1)
	}	
}
buildBTree(0,0,1)
access dends[0]
st = new IClamp(.5)
st.del =0.1
st.dur =0.5
st.amp = 120
nseg=2
//diam = diam*0.001

st2 = new IClamp(.7)
st2.del =0.1
st2.dur =0.5
st2.amp = 120

access dends[2]
st3 = new IClamp(.5)
st3.del =0.1
st3.dur =0.5
st3.amp = 120

st4 = new IClamp(.73)
st4.del =0.1
st4.dur =0.5
st4.amp = 120

tfinal = 1.5
dt =0.01

hoc_stdout("./Output/64T.csv")
printMechanisms("./Output/64MDL.csv")
printTopology()
hoc_stdout()
printFmatrix("./Output/64F.csv")
printPointProcesses("./Output/64PP.csv")
load_file("nrngui.hoc")
objref g1
access dends[0]
g1 =new Graph()
g1.beginline()
finitialize(-65)
while (t<tfinal){
	g1.line(t,v)
	fadvance()
	}