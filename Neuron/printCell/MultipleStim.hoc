objref outFile,amps,dels,durs,st
amp = -0.1
del = 10
dur = 80
NStimuli = 4
amps = new Vector(NStimuli)
dels = new Vector(NStimuli)
durs = new Vector(NStimuli)
for (i=0;i<NStimuli;i+=1){
	amps.x(i) = amp+i*0.1
	dels.x(i) = del
	durs.x(i) = dur
}

depth = 2
celsius = 25
proc createSimpleCompt(){
	nseg = 29
	cm=1
	diam=1
	L=50
	insert hh
	usetable_hh=0
	gnabar_hh =gnabar_hh/10
	gkbar_hh =gkbar_hh/10
	

finitialize(-65)
}
proc printConsts(){
	hoc_stdout($s1)
	{st.get_loc() printf("%s\n%f,%d\n",secname(),area(0.5),NStimuli) pop_section()}
	for(i=0;i<NStimuli;i+=1){
		printf("%f,%f,%f\n",dels.x(i),durs.x(i),amps.x(i))
	}
	printf("%f,%f,%f\n",dt,tfinal,celsius)
	hoc_stdout()
}
proc printTopology(){
	topology()
	forall{
		printf("%s\n",secname())
		printf("%f,%f,%f,%f,%f,%f,%f,%f,%f\n",nseg,L,diam,Ra,cm,area(0.5),v(0.5),parent_connection(),n3d())
		if (ismembrane("hh")==1){
			printf("%f,%f,%f,%f,%f,%f\n",gnabar_hh,gkbar_hh,gl_hh,ena,ek,el_hh)
			}	else{
			printf("\n")
			}
		}
}

proc printFmatrix(){
	finitialize(-65)
	hoc_stdout($s1)
	while(t<tfinal){
			fcurrent()
			fmatrix()
			forall{
			if (ismembrane("hh")==1){
				printf("%s\n",secname())
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0),gk_hh(0),gna_hh(0),gl_hh(0),ik(0),ina(0),il_hh(0),m_hh(0),h_hh(0),n_hh(0),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.2),gk_hh(0.2),gna_hh(0.2),gl_hh(0.2),ik(0.2),ina(0.2),il_hh(0.2),m_hh(0.2),h_hh(0.2),n_hh(0.2),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.4),gk_hh(0.4),gna_hh(0.4),gl_hh(0.4),ik(0.4),ina(0.4),il_hh(0.4),m_hh(0.4),h_hh(0.4),n_hh(0.4),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.6),gk_hh(0.6),gna_hh(0.6),gl_hh(0.6),ik(0.6),ina(0.6),il_hh(0.6),m_hh(0.6),h_hh(0.6),n_hh(0.6),minf_hh,mtau_hh,hinf_hh,htau_hh)
				printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\n",t,v(0.8),gk_hh(0.8),gna_hh(0.8),gl_hh(0.8),ik(0.8),ina(0.8),il_hh(0.8),m_hh(0.8),h_hh(0.8),n_hh(0.8),minf_hh,mtau_hh,hinf_hh,htau_hh)
				}	else{
				
				printf("%s\n",secname())
				printf("%f,%f\n",t,v(0))
				printf("%f,%f\n",t,v(0.2))
				printf("%f,%f\n",t,v(0.4))
				printf("%f,%f\n",t,v(0.6))
				printf("%f,%f\n",t,v(0.8))
				}
				
			}
			fadvance()
		}
	hoc_stdout()
}
numOfNodes = 2^depth-1
create dends[numOfNodes]
proc buildBTree(){
	fatherInd = $1
	currInd=$2
	currDepth =$3
	access dends[$2]
	createSimpleCompt()
	//nseg=currInd+1
	
	if($2>0){
		connect dends[$2](0), dends[$1](1)
	}
	printf("f is %d c is %d d is %d\n",$1,$2,$3)
	if($3 < depth){
	printf("currDepth is %d depth is %d\n",$3,depth)
		buildBTree($2,$2*2+1,$3+1)
		buildBTree($2,$2*2+2,$3+1)
	}	
}
buildBTree(0,0,1)
access dends[0]
st = new IClamp(.5)
L=L/10
diam=diam*10
st.del =20
st.dur =80
st.amp = 120
nseg=2
gnabar_hh =gnabar_hh*20
gkbar_hh =gkbar_hh*10
//diam = diam*0.001

tfinal = 120
dt =0.1
strdef pre,post,fileName
pre = "./Output/64MF"
post = ".csv"


printConsts("./Output/64MC.csv")
hoc_stdout("./Output/64MT.csv")
printTopology()
hoc_stdout()
for(i=0;i<NStimuli;i+=1){
	st.del = dels.x(i)
	st.dur = durs.x(i)
	st.amp = amps.x(i)
	sprint(fileName,"%s%d%s",pre,i,post)
	printFmatrix(fileName)
}
load_file("nrngui.hoc")