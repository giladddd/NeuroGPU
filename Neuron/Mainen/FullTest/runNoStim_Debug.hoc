objref dbg
dbg = new File()
dbg.wopen("C:/Users/Roy/Documents/NeuroGPU2_2/Neuron/printCell/Amit/output/Debug.csv")
usetable_na=0
usetable_km=0
usetable_kv=0
usetable_ca=0
usetable_kca=0
usetable_cad=0
secondorder=0

strdef fitFile,timesFile,paramsFile,stimFile,outFile,modelFile
modelFile = "./myMainen.hoc"
timesFile = "./times.dat"
paramsFile = "./orig.dat"
stimFile = "./Step.dat"
outFile = "./orig_step.dat"
ntimestep =6150
dt = 0.25
nparams =17
psize =1
ntraces =1
load_file(modelFile)
tfinal = 50
objref st,stims,fin,fout,pmat,matOut,stimtime,somaref,secref,extVec,strFunc
strFunc = new StringFunctions()
access soma
	st = new IClamp(0.5)
st.del=10
	st.dur=30
	st.amp = 0.5
fin = new File()
fout = new File()
proc runMatrix(){
	access soma
	st = new IClamp(0.5)
	printf ("$o1.nrow,$o2.nrow,$o2.ncol,%d,%d,%d",$o1.nrow,$o2.nrow,$o2.ncol)
	matOut = new Matrix($o1.nrow,($o2.nrow*$o2.ncol))
	for(sim=0;sim<$o1.nrow;sim+=1){
	printf("running sim %d\n",sim)
		counter=0
		transvec = $o1.getrow(sim)
		tfunc()
		for(i=0;i<stims.nrow;i+=1){
			finitialize(v_init)
			for(tt =0;tt<stimtime.ncol;tt+=1){
				dt  =0.25
				matOut.x(sim,counter)=v(0.5)
				counter+=1
				fadvance()
			}
		}
	}
	printf("finshed run matrix %s\n",outFile)
}
proc readMatrix(){localobj temp
	temp = new Vector()
	fin.ropen($s1)
	for (i=0;i<$o2.nrow;i+=1){
		temp.vread(fin)
		$o2.setrow(i,temp)
		print i
	}
	fin.close()
}
proc writeMatrix(){localobj temp
	fout.wopen($s1)
	temp = new Vector()
	for (i=0;i<$o2.nrow;i+=1){
		temp = $o2.getrow(i)
		temp.vwrite(fout,3)
	}
	fout.close()
}
proc mul32(){localobj thisone
	countSegs()
	segsMat = segs+comps+1 
	printf("1we have a matrix in the size of %d \n",segsMat )
	segsToAdd = 32-segsMat%32
	forall {
		thisone = new SectionRef()   
		if (thisone.nchild == 0 ) {
			break
			}
	}
	access thisone.sec
	nseg = nseg+segsToAdd
	fcurrent()
	countSegs()
	printf("we have a matrix in the size of %d \n",segs+comps+1 )
	
}
obfunc reverseSl(){localobj tempSl
tempSl = new SectionList()
comp = 0
forsec $o1{
		comp+=1
		
}
printf("in reverseSl comp is %d",comp)
for (i=comp;i!=0;i-=1){
	count=0
	forsec $o1{
		count+=1
		print count
		if (count == i){
			tempSl.append()
		}	
	}
}
print "prinitng rev sl"
forsec tempSl{
			print secname()
		}
return tempSl
}
/*proc disperseBranching(){localobj sl,conVec,tempSec,existList strdef fatherStr
	forall{
		comps = 0
		sl=new SectionList()
		existList =new SectionList()
		sl.children()
		somaref= new SectionRef()
		fatherStr = secname()
		forsec sl{
			comps+=1
		}
		if (comps>1){
			conVec = new Vector()
			forsec sl{
				curCon = parent_connection()
				exists =  conVec.indwhere("==", curCon)
				if (exists !=-1){
					printf("exists is %d\n",exists)
					somaref.sec.nseg = somaref.sec.nseg+1
					existList.append
				}	else{
					conVec.append(curCon)
				}
			}
			existCount = somaref.sec.nseg
			dseg = 1/somaref.sec.nseg
			forsec existList{
				newCon = dseg*existCount
				exists =  conVec.indwhere("==", newCon)
				while(exists !=-1){
					existCount-=1
					newCon = dseg*existCount
					exists =  conVec.indwhere("==", newCon)
				}
				existCount-=1
				printf("newCon is %f  dseg is %f currently in %s\n",newCon,dseg,secname())
				disconnect()
				secref= new SectionRef()
				somaref.sec connect secref.sec(0), (newCon)
			}
		}
	printf("finished with %s\n",fatherStr)
	}
	
	
}*/
proc disperseBranchingSegment(){localobj sl,conVec,tempSec,existList strdef fatherStr
	forall{
		comps = 0
		sl=new SectionList()
		existList =new SectionList()
		sl.children()
		somaref= new SectionRef()
		fatherStr = secname()
		forsec sl{
			comps+=1
		}
		if (comps>somaref.sec.nseg){
			somaref.sec.nseg = int(comps*3)
		}
		dseg = 1/somaref.sec.nseg
		connCount=somaref.sec.nseg
		forsec sl{
			newCon = dseg*connCount
			connCount-=1
			printf("newCon is %f  dseg is %f currently in %s\n",newCon,dseg,secname())
			disconnect()
			secref= new SectionRef()
			somaref.sec connect secref.sec(0), (newCon)
		}	
	printf("finished with %s\n",fatherStr)
	}
}

/*proc disperseBranch(){localobj sl,conVec,tempSec,existList strdef fatherStr
	ext_ind=0
	extLength=0.000001
	forall{
	comps = 0
	fatherStr = secname()
	if (strFunc.len(fatherStr)<4 || strFunc.substr(fatherStr,"Exts")==-1){
	sl=new SectionList()
	sl.children()
	somaref= new SectionRef()
	print "priniting Children"
	forsec sl{
		comps+=1
		print secname()
	}
	if (comps>1){
	//First connecting between the extension (if we have 3 comps we need two connections)
		for(i=ext_ind;i<ext_ind+comps-1;i+=1){
		 connect Exts[i+1](0), Exts[i](1)
		 Exts[i]{
		L=somaref.sec.L*(extLength/comps)
		diam = somaref.sec.diam
		cm = somaref.sec.cm
		Ra = somaref.sec.Ra
		printf ("%s L is %f somaref.sec.l %f %f\n",secname(),L,somaref.sec.L,extLength/comps)
		 }
		}
	printf("printing ext_ind %d\n",ext_ind)
	somaref.sec connect Exts[ext_ind](0), 1
	
	forsec sl{
		disconnect()
		tempSec = new SectionRef()
		connect tempSec.sec(0), Exts[ext_ind](1)
		ext_ind+=1
	}
	somaref.sec.L*=(1-extLength)
	}
	}
}
}
*/
proc countExts(){localobj sl
extVec = new Vector()
forall{
	comps = 0
	sl=new SectionList()
	sl.children()
	somaref= new SectionRef()
	forsec sl{
		comps+=1
	}
	if (comps>1){
		extVec.append(comps)
	}
	}
}
	
				/*create somaext[comps+1]
				index=0
				somaL=somaref.sec.L
				printf("%s l is %f diams is %f \n",secname(),somaref.sec.L, somaref.sec.diam)
				conVec = new Vector()
				cumL=0
				conVec.append(0)
				forsec sl{
					conVec.append(parent_connection())
				}
				conVec=conVec.sort()
				for(i=1;i<conVec.size();i+=1){
				printf("i is %d diams is %f\n",i, somaref.sec.diam)
					currPart = conVec.x(i)-conVec.x(i-1)
					somaext[i-1]{
						L=somaL*currPart
						diam = somaref.sec.diam
						parentCm = somaref.sec.cm
						parentRa = somaref.sec.Ra
						cumL+=L
					}
					connect somaext[i](0), somaext[i-1](1)
				}
				somaext[comps]{
					L=somaL-cumL
					diam = somaref.sec.diam
					parentCm = somaref.sec.cm
					parentRa = somaref.sec.Ra
				}
				forsec sl{
				printf("index is %d i is %d\n",index,i)
					disconnect()
					secref= new SectionRef()
					connect secref.sec(0),somaext[index](1)
					index+=1
				}
			}
	}	
}
*/
proc printChildren(){localobj sl
	sl = new SectionList()
	sl.children()
	u=0
	forsec sl{
	print secname()
	u+=1
	}
	print u
}	
proc printparent(){localobj sref
	sref = new SectionRef()
	sref.parent
	print secname()
}		
proc countSegs(){
segs=0
comps=0
	forall{
		segs+=nseg
		comps+=1
	}
}



stimtime = new Matrix(1,ntimestep)
readMatrix(timesFile,stimtime)
pmat = new Matrix(psize,nparams)
readMatrix(paramsFile,pmat)
stims = new Matrix(ntraces,ntimestep)
readMatrix(stimFile,stims)
topology()
/*countExts()
ext_num = extVec.sum()
printf("Creating Exts %d\n",ext_num)
create Exts[ext_num]*/
disperseBranchingSegment()
mul32()
transvec = pmat.getrow(0)
tfunc()

//ADD STUFF HERE
objref g1
g1 = new Graph()
g1.beginline()
access soma
finitialize(v_init)
while(t<tfinal){

g1.line(t,v(0.5))
fadvance()
forall{
dbg.printf("%s,",secname())
dbg.printf("%1.15f\n",v(0.5))
}
}

dbg.close()

