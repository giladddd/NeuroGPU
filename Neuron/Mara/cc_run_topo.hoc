load_file("nrngui.hoc")
track_data=1
xopen("params.hoc")
xopen("model.hoc")

objref  transvec
transvec = new Vector(40)


objref p_file
p_file = new File()
p_file.ropen("best.params")
                transvec.scanf(p_file)
		transvec.printf
p_file.close()


xopen("main.hoc")

xopen("bac6.ses")
tfunk()
objref st 
a_soma st = new IClamp(0.5)
st.del = 1
st.dur = 10
st.amp = 1
tfinal = 100
//ADD STUFF HERE
// Start topology output
hoc_stdout("/home/john/Projects/neurogpu2/Neuron/printCell/Amit/output/64T.csv")
topology()
forall{
	printf("%s\n",secname())
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%.16f,%f,%f\n",nseg,L,diam,Ra,cm,dt,st.del,st.dur,st.amp,tfinal,v(0.5),area(0.5),parent_connection(),n3d())
}
hoc_stdout()
// End topology output
// Start topologyList output
hoc_stdout("/home/john/Projects/neurogpu2/Neuron/printCell/Amit/output/64TL.csv")
MyTopology()
hoc_stdout()
// End topologyList output
// Start mechanisms output
objref mt,ms,fn,pp
strdef s,ss,mname
mt = new MechanismType(0)
fn = new File()
fn.wopen("/home/john/Projects/neurogpu2/Neuron/printCell/Amit/output/64MDL.csv")
forall{
	fn.printf("#%s\n",secname())
	if (ismembrane("pas")){
		fn.printf("g_pas = %f\n",g_pas)
		fn.printf("e_pas = %f\n",e_pas)
	}
	for i=0, mt.count()-1 {
		mt.select(i)
		mt.selected(mname)
		if (ismembrane(mname)){
			ms = new MechanismStandard(mname,-1)
			for j=0, ms.count()-1 {
				k = ms.name(s, j)
				sprint(ss,"temp=%s",s)
				execute(ss)
				fn.printf("%s = %f\n",s,temp)
			}
		}
	}
}
fn.close()
// End mechanisms output
// Start point processess mechanisms output
fn = new File()
fn.wopen("/home/john/Projects/neurogpu2/Neuron/printCell/Amit/output/64PP.csv")
forall{
	fn.printf("#%s\n",secname())
	mt = new MechanismType(1)
	mt.select("IClamp")
	for (pp = mt.pp_begin(); object_id(pp) != 0; pp = mt.pp_next()) {
		x = pp.get_loc()
		del1 = pp.del
		dur1 = pp.dur
		amp1 = pp.amp
		fn.printf("IClamp,%g, %g, %g, %g, ", x, del1, dur1, amp1)
		pop_section()
	}
	fn.printf("\n")
}
fn.close()
// End point processess mechanisms output

